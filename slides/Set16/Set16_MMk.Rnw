\documentclass[handout]{beamer}

\input{../frontmatter}
\input{../commands}

\newtheorem{principle}[theorem]{Principle}

\title{Set16 - M/M/k Queuing system}

\begin{document}

\begin{frame}
\maketitle
\end{frame}

\section{Bernoulli $k$-server queuing system}
\begin{frame}
\frametitle{Bernoulli $k$-server queuing system}
\footnotesize

\begin{definition}
A \alert{Bernoulli $k$-server queuing process} is a discrete-time queuing 
process with the following properties:
\begin{itemize}
\item \alert{$k$} servers
\item unlimited capacity
\item arrivals occur according to a binomial process with probability $p_A$ for
each frame
\item probability of a service completion is $p_S$ \alert{for each server} for each frame
\item service times and interarrival times are independent
\end{itemize}
\end{definition}

\vspace{0.1in} \pause

The current number of jobs being processed is $n = \min(x,k)$, i.e. the minimum 
of the number of jobs in the system $x$ and the number of servers $k$. \pause
\begin{itemize}
\item Departures ($X_d$) have \pause a binomial distribution: $X_d \sim Bin(n,p_S)$ 
\item Arrivals ($X_a$) have a Bernoulli distribution: $X_a \sim Ber(p_A)$. 
\end{itemize}
\end{frame}



\begin{frame}
\frametitle{Bernoulli $k$-server queuing system (cont.)}

Transition probabilities:
\[ \begin{array}{rl}
p_{x,x+1} &= \pause P(X_a=1,X_d=0) \pause \\
&= p_A(1-p_S)^n \pause \\ \\
p_{x,x} &= \pause P(X_a=1,X_d=1) + P(X_a=0,X_d=0) \pause \\
&= p_A {n\choose 1} p_S(1-p_S)^{n-1} + (1-p_A)(1-p_S)^n \pause \\ \\
p_{x,x-1} &= \pause P(X_a=1,X_d=2) + P(X_a=0,X_d=1) \pause \\
&= p_A {n\choose 2} p_S^2(1-p_S)^{n-2} + (1-p_A){n\choose 1}p_S(1-p_S)^{n-1} \pause \\ \\
& \qquad \vdots \\ \\
p_{x,x-n} &= \pause P(X_a=0,X_d=n) \pause \\
&= (1-p_A)p_S^n
\end{array} \]

\end{frame}



\section{$M/M/k$ queue}
\begin{frame}
\frametitle{$M/M/k$ queue}
\footnotesize

Letting $\lambda_A = p_A/\Delta$, $\lambda_S = p_S/\Delta$, and $\Delta \to 0$ 
while fixing $\lambda_A$ and $\lambda_S$ \pause results in

\vspace{0.1in} \pause

\begin{definition}
A \alert{$M/M/k$ queueing process} is a continuous-time Markov queuing process
with the following properties
\begin{itemize}
\item \alert{$k$} server,
\item unlimited capacity,
\item exponential interarrival times with arrival rate $\lambda_A$,
\item exponential service times with service rate $\lambda_S$ \alert{for each server}, and 
\item independent service and arrival times. 
\end{itemize}
\end{definition}

\vspace{0.1in} \pause

Transition probabilities:
\[ \begin{array}{rl}
p_{x,x+1} &= \lambda_A \Delta \\ 
p_{x,x} &= 1-\lambda_A\Delta-n\lambda_S\Delta\\
p_{x,x-1} &= n\lambda_S\Delta \\
p_{x,j} &= 0 \mbox{ for all other }j
\end{array} \]


\end{frame}




\begin{frame}
\frametitle{Balance equations}

\begin{principle}[Flow-in equals flow-out]
The \alert{flow-in equals flow-out principle} states that at steady-state the flow
in to a state must equal the flow out of the state \pause where the \alert{flow} is 
the probability of being in a state times the rate of movement.
\end{principle}
\pause
The first balance equation:
\[ 
\pi_0 \lambda_A \Delta = \pi_1 \lambda_S \Delta 
\implies 
\pi_1 = r \pi_0
\]
where $r=\lambda_A/\lambda_S$. 
\pause
The second balance equation:
\[ 
\pi_1 (\lambda_S\Delta + \lambda_A \Delta) = \pi_0 \lambda_A \Delta + \pi_2 (2\lambda_S \Delta) 
\implies \pi_2 = r\pi_1/2 = r^2\pi_0/2!
\]
Further balance equations:
\[ \pi_x = \left\{ \begin{array}{ll}
\pi_0r^x/x! & x\le k \\
\pi_0r^k/k! (r/k)^{x-k}& x>k
\end{array} \right. \]
\end{frame}



\begin{frame}
\frametitle{Steady-state distribution}

Using $\sum_i \pi_i = 1$ and $r=\lambda_A/\lambda_S$, we have 
\[ 
1 = \pi_0 \left( \sum_{i=0}^{k-1} \frac{r^i}{i!} + \frac{r^k}{k!} \frac{1}{(1-r/k)} \right)
\]
\pause
which implies 
\[ \pi_x = 
\left\{ 
\begin{array}{ll}
\left( \sum_{i=0}^{k-1} \frac{r^i}{i!} + \frac{r^k}{(1-r/k)k!} \right)^{-1} & x=0 \\
\frac{r^x}{x!}\pi_0 & 0<x\le k \\
\frac{r^k}{k!}\pi_0 \left( \frac{r}{k} \right)^{x-k} & x>k
\end{array}
\right.
\]
\pause
and
\[ 
E[X_w] = \sum_{y=1}^\infty y \pi_{k+y} = \pi_0 \frac{r^k}{k!}\frac{r/k}{(1-r/k)^2}.
\]
\pause
This steady-state distribution exists if $r/k = \lambda_A/k\lambda_S < 1$.
\end{frame}



\begin{frame}
\frametitle{Will I have to wait?}

At steady-state, what is the probability I will have to wait in the queue?

\vspace{0.1in} \pause

\[ \begin{array}{rl}
P(W>0) &= P(X\ge k) \\
&= \sum_{x=k}^\infty \pi_x \\
&= 1-\sum_{x=0}^{k-1} \pi_x \\
&= \pi_0\left( \frac{1}{\pi_0} - \sum_{x=0}^{k-1} \frac{r^x}{x!} \right) \\
&= \pi_0 \frac{r^k}{k!(1-r/k)}.
\end{array} \]
This is refered to as Erlang's C formula where C refers to the number of 
servers (so $k$ for us). \pause
We'll denote this with $E_k(r)=P(X\ge k)$. 

\vspace{0.1in} \pause

Note that 
\[ 
E[X_w] = E_k(r)\frac{r/k}{1-r/k}.
\]
\end{frame}



\begin{frame}
\frametitle{Other system properties}
\footnotesize

\begin{itemize}
\item Expected waiting time
\[ 
E[W] \pause = E[X_w]/\lambda_A = \frac{1}{k\lambda_S(1-r/k)}E_k(r)
\]
\pause
\item Expected service time
\[ 
E[S] \pause = \mu_S = 1/\lambda_S
\]
\pause
\item Expected response time
\[ 
E[R] \pause = E[W] + E[S] = \frac{1}{\lambda_S}\left(1+\frac{1}{k(1-r/k)}E_k(r)\right)
\]
\pause
\item Expected total jobs in the system
\[ 
E[X] \pause = \lambda_A E[R] = r + \frac{r/k}{(1-r/k)}E_k(r)
\]
\pause
\item Expected jobs being processed
\[ 
E[X_s] \pause = E[X]-E[X_w] = r
\]
\end{itemize}

\end{frame}



\begin{frame}[fragile]
\frametitle{Call center}
\scriptsize

Suppose a call center has the following properties:
\begin{itemize}
\item 55 agents
\item 360 calls per half hour
\item call processed, on average, in 4 minutes
\end{itemize}
{\tiny \url{http://www.mitan.co.uk/erlang/elgcmath.htm}}

\vspace{0.1in} \pause

Determine the system properties:
\begin{itemize}
\item $k = 55$
\item $\lambda_A = 0.2$ calls per second
\item $E[W] = 240$ seconds
\item $\lambda_S = 1/240$ calls per second
\end{itemize}

<<echo=TRUE, size='tiny'>>=
pi_0 = function(k,r) {
	ii = 0:(k-1)
	1/(sum(r^ii/factorial(ii)) + r^k/(1-r/k)/factorial(k))
}

pi_x = function(x,k,r) {
	pi0 = pi_0(k,r)
	pi0 * ifelse(x<=k, r^x/factorial(x), r^k/factorial(k)*(r/k)^(x-k))
}

erlang_c = function(k,r) {
	pi_0(k,r) * r^k/factorial(k)/(1-r/k)
}
@
\end{frame}




\begin{frame}[fragile]
\frametitle{}

<<echo=TRUE, size='tiny'>>=
k = 55
lambda_A = 0.2
S = 240                           # E[S]
lambda_S = 1/S
r = lambda_A/lambda_S; r/k        # Steady-state exists if r/k<1

X_w = erlang_c(k,r)*(r/k)/(1-r/k) # E[X_w]
W   = X_w/lambda_A                # E[W]
R   = W + S                       # E[R]
X_s = lambda_A*S                  # E[X_s]
X   = X_w + X_s                   # E[X]
	
expectations = data.frame(characteristic = c("jobs_total", "jobs_waiting", "jobs_processing",
															"time_total", "time_waiting", "time_processing"),
					 units = c(rep("number",3), rep("seconds", 3)),
					 inf_capacity = round(c(X, X_w, X_s, R, W, S),1))
expectations
@

\end{frame}





\subsection{Limited capacity}
\begin{frame}
\frametitle{$M/M/k/C$}
\small

\vspace{-0.05in}

\begin{definition}
An \alert{$M/M/k/C$} queuing process is an $M/M/k$ queuing process with a 
maximum capacity of $C$ for the system with \emph{attempted} arrival rate 
$\lambda$ and service rate $\lambda_S$.
\end{definition}

\pause

The steady-state probabilities are 
\[ \pi_x = 
\left\{ 
\begin{array}{ll}
\left( \sum_{i=0}^{k-1} \frac{r^i}{i!} + \sum_{i=k}^C \frac{r^k}{k!}(r/k)^{i-k} \right)^{-1} & x=0\\
\frac{r^x}{x!}\pi_0 & 0<x\le k \\
\frac{r^k}{k!}\pi_0 \left( \frac{r}{k} \right)^{x-k} & k<x\le C
\end{array}
\right. 
\]
where $r=\lambda/\lambda_S$. 
\pause 
The average line length is 
\[
E[X] = \sum_{x=0}^C x \pi_x.
\]
The probability the queue is full is $\pi_C$, thus the actually arrival rate is 
\[ 
\lambda_A = (1-\pi_C)\lambda
\]
since no jobs can arrive while the queue is at capacity.
\end{frame}



\begin{frame}
\frametitle{Remaining properties for $M/M/k/C$}
\tiny

This is exactly the same as in the $M/M/k/C$ queuing process. 

\begin{itemize}
\item Expected service time
\[ 
E[S] \pause= \frac{1}{\lambda_S} = \mu_S
\]
\pause
\item Expected time a job is in the system
\[ 
E[R] \pause= E[X]/\lambda_A
\]
\pause
\item Expected number of jobs being processed
\[ 
E[X_s] \pause= \lambda_A E[S] = \frac{\lambda_A}{\lambda_S} 
= \frac{(1-\pi_C)\lambda}{\lambda_S}
\]
\pause
\item Expected number of jobs in queue
\[ 
E[X_w] \pause= E[X]-E[X_s]
\]
\item Expected waiting time in queue
\[
E[W] \pause= E[R]-E[S] = \frac{E[X]}{\lambda_A}- \frac{1}{\lambda_S}
\]
\end{itemize}

\end{frame}




\begin{frame}[fragile]
\frametitle{Call center with no queue}
\tiny

\begin{example}
Suppose the call center has no queue but instead you receive a busy signal
when no agents are available. \pause 
Then $C=k$. 
\end{example}

\pause

At steady-state, we have 
<<mmkC, echo=TRUE>>=
pi_0 = function(k, r, C) {
	ii = 0:(k-1); II = k:C
	1/(sum(r^ii/factorial(ii)) + r^k/factorial(k)*sum((r/k)^(II-k)))
}

pi_x = function(x, k, r, C) {
	pi0 = pi_0(k, r, C)
	pi0 * ifelse(x<=k, r^x/factorial(x), r^k/factorial(k)*(r/k)^(x-k))
}

C = k
pi0 = pi_0(k,r,C)
pi = numeric(C); for (kk in 1:C) pi[kk] = pi_x(kk, k, r, C)
lambda = 0.2; lambda_A = (1-pi[C])*lambda
X   = sum(1:C*pi) # E[X]
R   = X/lambda_A  # E[R]
W   = R-S         # E[W]
X_w = W*lambda_A  # E[X_w]
X_s = X-X_w       # E[X_s]
@
\end{frame}




\begin{frame}[fragile]
\frametitle{Comparison of the properties}

<<size='tiny'>>=
# Probability of being at the threshold
pi[C]

# Observed arrival rate
lambda_A

# System properties
expectations$C_capacity = round(c(X, X_w, X_s, R, W, S), 1)
expectations[,c("characteristic","units","inf_capacity","C_capacity")]
@

\end{frame}



\section{$M/M/\infty$}
\begin{frame}
\frametitle{$M/M/\infty$}

With an infinite number of servers, there is no queue and thus \pause
\[
X_w = 0, \, W=0, \, X = Xs, \mbox{ and }R = S.
\]
\pause
The properties of this system can be obtained by taking the limit as 
$k\to\infty$. \pause
The steady-state of the system is
\[
\pi_0 = \left( \sum_{i=0}^\infty \frac{r^i}{i!} +
\lim_{k\to\infty} \frac{r^k}{(1-r/k)k!} \right)^{-1} = (e^r+0)^{-1} = e^{-r}
\]
and
\[
\pi_x = \frac{r^x}{x!}\pi_0 = \frac{r^x e^{-r}}{x!}
\]
which is the probability mass function for a Poisson distribution with rate
$r=\lambda_A/\lambda_S$.
\end{frame}



\begin{frame}
\frametitle{An automated call center}

A fully automated call center can be modeled as an $M/M/\infty$ queuing process. 
Assuming the same rates as previous (which is probably not reasonable), we have 
\[ 
E[X] = E[X_s] = r = \lambda_A/\lambda_S = \Sexpr{lambda/lambda_S} \mbox{ jobs}
\]
and 
\[ 
E[R] = E[S] = E[X]/\lambda_A = 1/\lambda_S = \Sexpr{1/lambda_S} \mbox{ seconds}.
\]
\pause
The number of jobs in the system is fairly close to the results with $k=55$ 
because with $k=\Sexpr{k}$ servers very few jobs have to wait, 
$E[X_w]=\Sexpr{expectations$inf_capacity[expectations$characteristic=="jobs_waiting"]}$
jobs, and the average wait time is short, 
$E[W] = \Sexpr{expectations$inf_capacity[expectations$characteristic=="time_waiting"]}$
 seconds.


\end{frame}


\end{document}


